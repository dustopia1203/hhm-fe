/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as ProductsProductIdImport } from './routes/products/$productId'
import { Route as MyOrdersImport } from './routes/my/orders'
import { Route as MyCartImport } from './routes/my/cart'
import { Route as authVerifyAccountImport } from './routes/(auth)/verify-account'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsProductIdRoute = ProductsProductIdImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRoute,
} as any)

const MyOrdersRoute = MyOrdersImport.update({
  id: '/my/orders',
  path: '/my/orders',
  getParentRoute: () => rootRoute,
} as any)

const MyCartRoute = MyCartImport.update({
  id: '/my/cart',
  path: '/my/cart',
  getParentRoute: () => rootRoute,
} as any)

const authVerifyAccountRoute = authVerifyAccountImport.update({
  id: '/(auth)/verify-account',
  path: '/verify-account',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/verify-account': {
      id: '/(auth)/verify-account'
      path: '/verify-account'
      fullPath: '/verify-account'
      preLoaderRoute: typeof authVerifyAccountImport
      parentRoute: typeof rootRoute
    }
    '/my/cart': {
      id: '/my/cart'
      path: '/my/cart'
      fullPath: '/my/cart'
      preLoaderRoute: typeof MyCartImport
      parentRoute: typeof rootRoute
    }
    '/my/orders': {
      id: '/my/orders'
      path: '/my/orders'
      fullPath: '/my/orders'
      preLoaderRoute: typeof MyOrdersImport
      parentRoute: typeof rootRoute
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/verify-account': typeof authVerifyAccountRoute
  '/my/cart': typeof MyCartRoute
  '/my/orders': typeof MyOrdersRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/verify-account': typeof authVerifyAccountRoute
  '/my/cart': typeof MyCartRoute
  '/my/orders': typeof MyOrdersRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(auth)/verify-account': typeof authVerifyAccountRoute
  '/my/cart': typeof MyCartRoute
  '/my/orders': typeof MyOrdersRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/products/': typeof ProductsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/verify-account'
    | '/my/cart'
    | '/my/orders'
    | '/products/$productId'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/verify-account'
    | '/my/cart'
    | '/my/orders'
    | '/products/$productId'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(auth)/verify-account'
    | '/my/cart'
    | '/my/orders'
    | '/products/$productId'
    | '/products/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  authVerifyAccountRoute: typeof authVerifyAccountRoute
  MyCartRoute: typeof MyCartRoute
  MyOrdersRoute: typeof MyOrdersRoute
  ProductsProductIdRoute: typeof ProductsProductIdRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  authVerifyAccountRoute: authVerifyAccountRoute,
  MyCartRoute: MyCartRoute,
  MyOrdersRoute: MyOrdersRoute,
  ProductsProductIdRoute: ProductsProductIdRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)/login",
        "/(auth)/register",
        "/(auth)/verify-account",
        "/my/cart",
        "/my/orders",
        "/products/$productId",
        "/products/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/(auth)/verify-account": {
      "filePath": "(auth)/verify-account.tsx"
    },
    "/my/cart": {
      "filePath": "my/cart.tsx"
    },
    "/my/orders": {
      "filePath": "my/orders.tsx"
    },
    "/products/$productId": {
      "filePath": "products/$productId.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
